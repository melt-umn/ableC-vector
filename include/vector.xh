#include <stdio.h>
#include <stdlib.h>

#ifndef _VECTOR_XH
#define _VECTOR_XH

template<typename a>
struct _vector_s {
  void *(*alloc)(size_t size);
  void *(*realloc)(void *ptr, size_t size);
  void (*dealloc)(void *ptr);
  size_t size;
  size_t capacity;
  a *contents;
};

// Check whether an index is valid for a given vector
template<typename a>
static void _check_index_vector(vector<a> v, size_t idx) {
  if ((_vector_s<a> *)v == NULL || ((_vector_s<a> *)v)->contents == NULL) {
    fprintf(stderr, "Cannot access uninitialized vector\n");
    abort();
  }
  if (idx >= v.size || idx < 0) {
    fprintf(stderr, "Vector index out of bounds: size %lu, index %lu\n", v.size, idx);
    abort();
  }
}

// Modify the size of a vector to new_size
template<typename a>
static void resize_vector(vector<a> v, size_t new_size) {
  ((_vector_s<a> *)v)->size = new_size;
  if (new_size > v.capacity) {
    ((_vector_s<a> *)v)->capacity = new_size * 2;
    ((_vector_s<a> *)v)->contents =
      ((_vector_s<a> *)v)->realloc(((_vector_s<a> *)v)->contents, sizeof(a) * v.capacity + 1);
  }
}

// Create a new vector with the given size
template<typename a>
static vector<a> new_vector(size_t size, a init,
                            void *(*alloc)(size_t size),
                            void *(*realloc)(void *ptr, size_t size),
                            void (*dealloc)(void *ptr)) {
  size_t capacity = size * 2;
  vector<a> result = (vector<a>)alloc(sizeof(_vector_s<a>));
  *(_vector_s<a> *)result = (_vector_s<a>){alloc, realloc, dealloc, size, capacity, alloc(sizeof(a) * capacity + 1)};
  for (size_t i = 0; i < size; i++) {
    result[i] = init;
  }
  return result;
}

// Free the memory representing a vector
template<typename a>
static void delete_vector(vector<a> v) {
  void (*dealloc)(void *ptr) = ((_vector_s<a> *)v)->dealloc;
  if (dealloc) {
    dealloc(((_vector_s<a> *)v)->contents);
    dealloc((_vector_s<a> *)v);
  }
}

// Make a shallow copy of a vector
template<typename a>
static vector<a> copy_vector(vector<a> v) {
  a uninit;
  vector<a> result =
    new vector<a>(v.size, uninit,
                  ((_vector_s<a> *)v)->alloc,
                  ((_vector_s<a> *)v)->realloc,
                  ((_vector_s<a> *)v)->dealloc);
  for (size_t i = 0; i < v.size; i++) {
    // Note that this uses overloaded =
    result[i] = v[i];
  }
  return result;
}

// Append an element to the end of a vector
template<typename a>
static void append_vector(vector<a> v, a elem) {
  resize_vector(v, v.size + 1);
  v[v.size - 1] = elem;
}

// Pop an element from the end of a vector
template<typename a>
static a pop_vector(vector<a> v) {
  a elem = v[v.size - 1];
  v.size--;
  return elem;
}

// Insert an element at an index into a vector
template<typename a>
static void insert_vector(vector<a> v, size_t idx, a elem) {
  resize_vector(v, v.size + 1);
  for (size_t i = v.size - 1; i > idx; i--) {
    // Note that this uses overloaded =
    v[i] = v[i - 1];
  }
  v[idx] = elem;
}

// Append all the elements of another vector to a vector
template<typename a>
static void extend_vector(vector<a> v1, vector<a> v2) {
  size_t v1_size = v1.size;
  size_t v2_size = v2.size;
  resize_vector(v1, v1_size + v2_size);
  for (size_t i = 0; i < v2_size; i++) {
    // Note that this uses overloaded =
    v1[i + v1_size] = v2[i];
  }
}

// Check if two vectors are equal
template<typename a>
static _Bool equals_vector(vector<a> v1, vector<a> v2) {
  if (v1.size != v2.size)
    return 0;

  for (size_t i = 0; i < v1.size; i++) {
    // Note that this uses overloaded !=
    if (v1[i] != v2[i])
      return 0;
  }
  
  return 1;
}

// Convert a vector to a string representation
template<typename a>
static string show_vector(vector<a> v) {
  if (v.size == 0)
    return str("[]");

  string result = "[" + show(v[0]);
  
  for (size_t i = 1; i < v.size; i++) {
    result += ", " + show(v[i]);
  }
  
  return result + "]";
}

#endif
